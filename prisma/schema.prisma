generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Chats {
  id                   Int           @id @default(autoincrement())
  nom                  String
  age                  Int
  automatiqueAnnonce   Boolean       @default(false)
  description          String
  race                 String?
  annonceUrl           String?
  sterilise            Boolean?
  vaccinations         String?
  adopte               Boolean       @default(false)
  histoire             String?
  type                 String        @default("Européen")
  sexe                 Sexe
  couleur              String        @default("Tigré")
  taille               Taille        @default(MOYEN)
  ententeChien         Boolean?
  ententeChat          Boolean?
  ententeEnfant        Boolean?
  typeFoyerMaison      Boolean?
  typeFoyerAppartement Boolean?
  contactEmail         String?
  contactTel           String?
  contactUrl           String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  associationId        Int?
  isVisible            Boolean       @default(true)
  association          Associations? @relation(fields: [associationId], references: [id], map: "Chats_Association_FK")
  favoris              Favoris[]
  photos               Photos[]
  videos               Videos[]

  @@index([associationId], map: "Chats_associationId_fkey")
}

model Photos {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  url           String
  chatId        Int?
  associationId Int?
  association   Associations? @relation(fields: [associationId], references: [id], map: "Photos_Associations_FK")
  chat          Chats?        @relation(fields: [chatId], references: [id], map: "Photos_Chats_FK")

  @@index([chatId], map: "Photos_chatId_fkey")
}

model Videos {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  url       String
  chatId    Int
  chat      Chats    @relation(fields: [chatId], references: [id], map: "Videos_Chats_FK")

  @@index([chatId], map: "Videos_chatId_fkey")
}

model Utilisateurs {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  userId        String        @unique
  nom           String        @default("Anonyme")
  img          String         @default("https://geekflare.com/fr/wp-content/plugins/wp-user-avatars/wp-user-avatars/assets/images/mystery.jpg")
  associationId Int?
  favoris       Favoris[]
  messages      Messages[]
  association   Associations? @relation(fields: [associationId], references: [id], map: "Utilisateurs_Associations_FK")

  @@index([associationId], map: "Utilisateurs_associationId_fkey")
}

model Associations {
  id                  Int            @id @default(autoincrement())
  nom                 String         @unique
  url                 String?        @db.VarChar(50)
  ville               String         @db.VarChar(50)
  description         String?
  shortDescription    String?
  tel                 String?        @db.VarChar(50)
  urlGoogleMapsEmbled String?
  chats               Chats[]
  photos              Photos[]
  utilisateurs        Utilisateurs[]
  messages            Messages[]
}

model Messages {
  id             Int          @id @default(autoincrement())
  contenu        String
  createdAt      DateTime     @default(now())
  utilisateursId Int
  associationsId Int
  isUserSender   Boolean      @default(true)
  utilisateur    Utilisateurs @relation(fields: [utilisateursId], references: [id], map: "Messages_Utilisateur_FK")
  association    Associations @relation(fields: [associationsId], references: [id], map: "Messages_Association_FK")

  @@index([utilisateursId], map: "Index_UtilisateursId")
  @@index([associationsId], map: "Index_AssociationsId")
}

model Favoris {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  chatId        Int
  utilisateurId Int
  chat          Chats        @relation(fields: [chatId], references: [id], map: "Favoris_Chats_FK")
  utilisateur   Utilisateurs @relation(fields: [utilisateurId], references: [id], map: "Favoris_Utilisateurs_FK")

  @@index([chatId], map: "Favoris_chatId_fkey")
  @@index([utilisateurId], map: "Favoris_utilisateurId_fkey")
}

enum Role {
  ADMIN
  USER
  ASSOCIATION
}

enum Sexe {
  FEMELLE
  MALE
}

enum Taille {
  PETIT
  MOYEN
  GRAND
}
